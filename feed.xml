<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>https://artsy.github.io/</link>
    <atom:link href="https://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 12 Apr 2022 04:41:59 +0000</pubDate>
    <lastBuildDate>Tue, 12 Apr 2022 04:41:59 +0000</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>Using Context to Simplify a VERY Large React Form</title>
        <description>&lt;p&gt;For those unfamiliar, Artsy is a fine art marketplace. Knowing that, it follows logically to say that the form via
which our partners list artworks for sale is an integral part of Artsy’s core systems. This form, known only as
“The Artwork Form,” is whispered about in the halls of Arty’s New York headquarters. It is legendary. It is a
colossus. It is old enough not only to predate React v16.8 hooks and context APIs, but Artsy’s use of React
entirely. The first version of the Artwork Form was built in 2014 using ruby and haml, and began its refactoring
into JS/JQuery/React a full 2 years later, after having expanded considerably from the original implementation.
That process (at least what we’ve gleaned from our git excavation) was incremental, experimental, and passed
through many hands before it landed in the lap of the current Partner Experience (PX) team.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;PX has since been tasked with the maintenance of this unwieldy kaiju, spending endless amounts of time on seemingly
insignificant changes to behavior or UI, all while watching its performance degrade. Many of the people reading
this are already familiar with the story we’re telling. Many have worked in their very own version of the tale, and
borne witness to the fact that legacy code of this scale becomes a living, breathing entity. The developers that
tend these beasts learn their patterns and idiosyncrasies, their little moans and groans, and for the sake of
expediency work within those constraints to accomplish their tasks. But when is enough, enough? When does the
developer time expended working within the constraints of an obsolete design begin to outweigh the time it would
take to simply &lt;em&gt;fix&lt;/em&gt; &lt;em&gt;the code&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;First, let’s be honest: there is no single right answer to this question. When working in software development we
have to deal with certain realities: user experience vs. developer experience, lead time to the next release,
buy-in from stakeholders, etc. These factors may weigh more or less depending on the shop and the product. At Artsy
we’re very lucky, in that our engineering department is given the time to attend to our tech debt and to be
deliberate about when and how we go about this. In the case of the Artwork Form, there were several issues that had
become too glaring to ignore:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The data coming in, and subsequently being passed to individual components, was being completely obscured by the
amount of prop drilling and spreading that existed within the composed form.&lt;/li&gt;
  &lt;li&gt;The prolific use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt; when typing data was disabling typescript and consequently removing its usefulness
while still imposing all of its burdens.&lt;/li&gt;
  &lt;li&gt;The components within the form were tightly coupled, the number and specificity of props needed for each
disallowing reuse in other parts of the app.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A few of us on the PX team decided to take matters into our own hands and address some of these key problems with
the Artwork Form. We came up with a plan to incrementally convert the form to use values from the Formik context,
use these values wherever possible to reduce prop-drilling, add much more complete types to the components to get
rid of all the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt;’s, and update some of our testing strategies as needed.&lt;/p&gt;

&lt;p&gt;Here are the steps we took to do this conversion:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a hook that allows us to use the Formik context throughout the form&lt;/p&gt;

    &lt;p&gt;The hook wraps &lt;a href=&quot;https://formik.org/docs/api/useFormikContext&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useFormikContext&lt;/code&gt;&lt;/a&gt; to allow all of our components
inside of Formik to access the values from Formik context. It looks like this:&lt;/p&gt;

    &lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useArtworkForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FormikContextType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ArtworkValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formikContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useFormikContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ArtworkValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formikContext&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;We use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArtworkValues&lt;/code&gt; as the generic type so that when we are accessing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values&lt;/code&gt; anywhere inside the component
tree, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values&lt;/code&gt; can be type-checked.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Convert all of the components in the form to functional components and to TypeScript. (Because the form is
several years old, there were still many class components and many components that were not yet using
TypeScript.) This step could be done in parallel with Step 1. One note here is that when converting files from
JavaScript to TypeScript, we did not explicitly type the props in an interface. Once we can take advantage of
our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useArtworkForm&lt;/code&gt; hook, we will reduce the amount of props needed in each component, so we will hold off on
typing the props until step 3.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The bulk of the work was making use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useArtworkForm&lt;/code&gt; hook in the Artwork Form components. Starting with
the lowest leaves of the component tree and moving up, we removed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;props&lt;/code&gt; from the component definition and
destructured any values we needed in the component from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useArtworkForm&lt;/code&gt; hook. Once we used everything we
could from the context, we added back in any additional props that we would still need to have passed down from
the parent. In many cases, this was no props at all—a particularly satisfying case. If the component still
needed props passed down, we explicitly typed the props at the top of each component in an interface because we
now knew exactly which props we would need inside of the component. Another key step here was going into the
parent component and getting rid of any prop spreading (this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...props&lt;/code&gt;) and instead explicitly passing down
exactly the props needed in the component (if there were any).&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;A note on tests: Whenever we took advantage of the Formik context in a component, we were breaking that
component’s tests, because the wrappers we were using in the tests did not have access to the Formik context
and were being passed props that the component was no longer looking at. We created a helper test wrapper
that we could use in all of our Artwork Form tests to wrap the test’s specific wrapper inside of a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Formik/&amp;gt;&lt;/code&gt; component and provide the specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values&lt;/code&gt; to use as the initial values for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Formik&lt;/code&gt;. Many of
our test cases involve passing different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values&lt;/code&gt; into the component, which we originally did via props but
now will do via the Formik context through the wrapper. Here’s what the wrapper looks like:&lt;/li&gt;
    &lt;/ol&gt;

    &lt;div class=&quot;language-tsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestFormikWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TestFormikWrapperProps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Formik&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;initialValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onSubmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Formik&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Here is an example of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TestFormikWrapper&lt;/code&gt; used in a test:&lt;/p&gt;

    &lt;div class=&quot;language-tsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;TestComponent&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displays values&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestFormikWrapper&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Andy Warhol&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestFormikWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toInclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Andy Warhol&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Once we completed the conversion all the way up the tree to the root component, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArtworkForm&lt;/code&gt;, we typed that
component as strictly as possible and made sure to get rid of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt;’s. There were quite a few when we started
the process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, where did we end up? Now all of the components in the Artwork Form are making use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useArtworkForm&lt;/code&gt; hook
if they were previously accessing any of the values from the Formik context from props. We have much less prop
drilling between components and instead explicitly pass down the props needed from parent to child. It’s now much
more clear for developers what data is passing between the components and what data is actually being used in the
child. All of the components are also explicitly typed so we know exactly which props, if any, need to be passed
down from the parent. If any of these props are removed, TypeScript helps us by failing loudly.&lt;/p&gt;

&lt;p&gt;One of the main pain points of the Artwork Form is that it’s very difficult for new developers (whether new to
Artsy or new to the Partner Experience team) to contribute and make changes to the form without breaking something
or spending extra time figuring out how data is passed within the form. Hopefully, this change will make it easier
for developers to understand the Artwork From.&lt;/p&gt;

&lt;p&gt;How did the Artwork Form get so complicated? Well, as we shared, the Artwork Form is the key to achieving one of
the PX team’s core goals: surfacing the most accurate and rich information about artworks to collectors. We have to
allow partners to add more and increasingly specific pieces of metadata to artworks. The form has been growing and
for better or worse, will need to keep growing. Even though we expect to grow the form to meet metadata needs, we
do not put too much focus on the UX/UI of the Artwork Form in order to prioritize our collector-facing apps. (The
Artwork Form is only used by a relatively small subset of users, mostly gallery partners.) Hopefully, this refactor
will allow us to expand the form more seamlessly and will make it easier to navigate as it grows.&lt;/p&gt;

&lt;p&gt;This refactor is still in its early days. The next steps for making the form easier to use (for both developers and
our end users) will require larger changes. When we think about further progress on revamping the Artwork Form, our
team is considering breaking the form up into smaller forms. Imagine, we are rendering several different top-level
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Formik&lt;/code&gt; components that include discrete sections of the form, instead of just one giant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Formik&lt;/code&gt; tree as we have
now. We would then combine these “mini forms” together, making better use of React’s core principle of composition.&lt;/p&gt;

&lt;p&gt;Breaking up the form would be a big change for the developer experience (but hopefully made easier by this
refactor). It could also involve big changes to the UI. The Artwork Form is not just hard to navigate for
developers. It’s hard for users too. Over the next couple of months, our Product Manager will be working with one
of Artsy’s user researchers to conduct user testing on the form. Feedback from galleries will help determine where
we next take this project. We’re excited to have buy-in from our product team to work on a project that will
elevate the user experience while allowing us to use that opportunity to improve the developer experience as well.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2022/02/01/using-context-to-simplify-a-react-form/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2022/02/01/using-context-to-simplify-a-react-form/</guid>
        
        
        <category>context</category>
        
        <category>react</category>
        
        <category>refactoring</category>
        
        <category>typescript</category>
        
      </item>
    
      <item>
        <title>A Year in Review: 2021</title>
        <description>&lt;p&gt;Ufff, 2021 was a tough year. It was the second year of the Covid-19 pandemic. We tried our best to support each
other through these challenging times and in that spirit, we feel like it’s important not to lose sight of our
accomplishments. As we say goodbye to 2021 and hello to 2022, here are some Artsy Engineering wins from this past year.&lt;/p&gt;

&lt;p&gt;What did you ship in 2021? We would love to hear about it and celebrate with you!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
  &lt;li&gt;Recorded and released 42 episodes of the &lt;a href=&quot;https://www.buzzsprout.com/1781859&quot;&gt;Artsy Engineering Radio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Onboarded 23 engineers in Berlin, Germany&lt;/li&gt;
  &lt;li&gt;Leveraged our investment in React Native to launch the &lt;a href=&quot;https://play.google.com/store/apps/details?id=net.artsy.app&quot;&gt;Artsy Android App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;We &lt;a href=&quot;https://github.com/pulls?q=is%3Apr+user%3Aartsy+created%3A%3E%3D2021-01-01+-created%3A%3E%3D2022-01-01&quot;&gt;opened&lt;/a&gt; 13,368 pull requests! 12,054 were &lt;a href=&quot;https://github.com/pulls?q=is%3Apr+user%3Aartsy+created%3A%3E%3D2021-01-01+-created%3A%3E%3D2022-01-01+is%3Amerged+merged%3A%3C%3D2021-12-31&quot;&gt;merged&lt;/a&gt; and 1,050 were &lt;a href=&quot;https://github.com/pulls?q=is%3Apr+user%3Aartsy+created%3A%3E%3D2021-01-01+-created%3A%3E%3D2022-01-01+is%3Aclosed+is%3Aunmerged&quot;&gt;closed&lt;/a&gt;. (note: includes contributions in private repositories)&lt;/li&gt;
  &lt;li&gt;Responded to and resolved 29 incidents&lt;/li&gt;
  &lt;li&gt;Collaborated with &lt;a href=&quot;https://www.itechart.com&quot;&gt;iTechArt&lt;/a&gt; engineers on impactful projects&lt;/li&gt;
  &lt;li&gt;Migrated more repositories to deploy continuously&lt;/li&gt;
  &lt;li&gt;Significantly improved &lt;a href=&quot;https://web.dev/vitals&quot;&gt;Core Web Vitals&lt;/a&gt; across our web surfaces&lt;/li&gt;
  &lt;li&gt;Answered a bunch of questions in our #dev-help Slack channel to help &lt;a href=&quot;https://youtu.be/3XscuivvUzI&quot;&gt;get each other unstuck&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;After many false starts, we finally agreed to pull the trigger on a full auction bidding engine rewrite&lt;/li&gt;
  &lt;li&gt;More stable end-to-end automated testing tooling (codenamed “integrity”)&lt;/li&gt;
  &lt;li&gt;Worked with &lt;a href=&quot;https://www.applause.com&quot;&gt;Applause&lt;/a&gt; to help us with external QA for our mobile apps&lt;/li&gt;
  &lt;li&gt;Bootstrapped a new data engineering team&lt;/li&gt;
  &lt;li&gt;Launched our a new recommendation model (codenamed “affinity score”)&lt;/li&gt;
  &lt;li&gt;Developed an in-house auction results pipeline&lt;/li&gt;
  &lt;li&gt;Launched improvements to our recommendations (New Works for You) for the first time in a while!&lt;/li&gt;
  &lt;li&gt;Launched integrations with &lt;a href=&quot;https://arta.io&quot;&gt;Arta&lt;/a&gt; (shipping), &lt;a href=&quot;https://www.avalara.com&quot;&gt;Avalara&lt;/a&gt; (tax compliance), &lt;a href=&quot;https://algolia.com&quot;&gt;Algolia&lt;/a&gt; (search), &lt;a href=&quot;https://www.adjust.com&quot;&gt;Adjust&lt;/a&gt; (analytics), &lt;a href=&quot;https://www.braze.com&quot;&gt;Braze&lt;/a&gt; (marketing), and &lt;a href=&quot;https://postie.com&quot;&gt;Postie&lt;/a&gt; (marketing).&lt;/li&gt;
  &lt;li&gt;Moved 38+ of &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;Force&lt;/a&gt; (artsy.net) apps to a new and improved V2 setup&lt;/li&gt;
  &lt;li&gt;Rebuilt our design system &lt;a href=&quot;https://github.com/artsy/palette&quot;&gt;Palette&lt;/a&gt;, updated its documentation, and migrated many web and mobile surfaces to the new look&lt;/li&gt;
  &lt;li&gt;Rebuilt our artwork inquiry flow! Finally!&lt;/li&gt;
  &lt;li&gt;Migrated to a new marketing email service provider without incident (described as a project “i wouldn’t wish on my worst enemy”)&lt;/li&gt;
  &lt;li&gt;Added Make Offer support for artwork inquiries&lt;/li&gt;
  &lt;li&gt;Hired our first agile coach!&lt;/li&gt;
  &lt;li&gt;Tech leads are taking more ownership over the success of their teams&lt;/li&gt;
  &lt;li&gt;Moved a bunch of projects off of Heroku and onto our Kubernetes infrastructure&lt;/li&gt;
  &lt;li&gt;Invested in an improved turn-key set-up for new folks&lt;/li&gt;
  &lt;li&gt;Integrated our API with more third-party art management systems like &lt;a href=&quot;https://www.artbase.com&quot;&gt;ArtBase&lt;/a&gt; and &lt;a href=&quot;https://www.applause.com&quot;&gt;Artsystems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spun up a trial integration with &lt;a href=&quot;https://www.split.io&quot;&gt;Split&lt;/a&gt; (experimentation and feature flagging vendor)&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2022/01/06/a-year-in-review-2021/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2022/01/06/a-year-in-review-2021/</guid>
        
        
        <category>engineering</category>
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>What JavaScript Tests Could Learn From RSpec</title>
        <description>&lt;p&gt;When I started at Artsy a few years ago, I’d never written a line of Ruby. I feel at home with JavaScript — it’s
been my buddy since I started my career over 20 years ago. I’ve written enough tests in JavaScript that I sometimes
feel like I can write them in my sleep (as long as they don’t involve async React events 😅).&lt;/p&gt;

&lt;p&gt;Most of the code I write at Artsy is still JavaScript, but now I write some Ruby code too, and I’ve written enough
RSpec tests that I’m starting to form opinions about what I think they should look like.&lt;/p&gt;

&lt;p&gt;My most recent work has been JavaScript again. I’ve been writing Jest tests against one of our React apps. But
rather than reaching for the testing patterns I’d become accustomed to over my years of JavaScripting, I’m finding
that something’s missing in my Jest tests! My experiences with RSpec have me longing for two features in Jest:&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; blocks&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; blocks&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-context-blocks&quot;&gt;1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; blocks&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://relishapp.com/rspec/rspec-core/v/2-11/docs/example-groups/basic-structure-describe-it&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; block&lt;/a&gt;
in an RSpec test is, as I understand it, literally the same thing as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; block. Like it’s just an alias of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt;. What’s the point, you ask?&lt;/p&gt;

&lt;p&gt;The difference is in, well, context. Well-organized RSpec tests use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; to describe what’s being
tested…and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; to describe scenarios of the thing being tested.&lt;/p&gt;

&lt;p&gt;For example, if I wanted to test the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multiply&lt;/code&gt; method of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Calculator&lt;/code&gt; class, I might write some test scenarios
that look like this:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Calculator&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.multiply&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the first value is negative&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the second value is negative&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns a positive number&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the second value is positive&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns a negative number&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the difference in those test cases between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;? The way I think about it is: if the
statement coming after my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; describes a pre-condition for the test, it’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;; otherwise
it’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; wouldn’t be hard to implement in JavaScript — I’d bet there are test frameworks that have it. It’d just
be an alias of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-let-blocks&quot;&gt;2. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; blocks&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://relishapp.com/rspec/rspec-core/v/2-11/docs/helper-methods/let-and-let&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; blocks&lt;/a&gt; are used in an RSpec
test to set things up for your test scenario.&lt;/p&gt;

&lt;p&gt;Here’s a test for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Counter&lt;/code&gt; class, verifying that when I call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increment&lt;/code&gt; method on an instance, its stored
value becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;counter&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;increment&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;increments by 1&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re new to Ruby, the only line that doesn’t translate almost directly to a similar JavaScript expression is
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; statement in RSpec &lt;a href=&quot;https://medium.com/@tomkadwill/all-about-rspec-let-a3b642e08d39&quot;&gt;creates a method with a specified name, which lazily evaluates to the result of a
block&lt;/a&gt;. In this case, we get a method named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter&lt;/code&gt;, which is evaluated to a new instance of the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Counter&lt;/code&gt; class. There are a few important things to note about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; blocks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;They’re evaluated lazily (by default). That &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter&lt;/code&gt; doesn’t actually get created until I reference it.&lt;/li&gt;
  &lt;li&gt;They’re memoized. Wherever I reference &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter&lt;/code&gt; within that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe &quot;counter&quot;&lt;/code&gt; block, I’m getting the same
instance. It’s initialized to whatever I return inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; block.&lt;/li&gt;
  &lt;li&gt;I can override a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; block deeper inside the tree of tests, by declaring another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let(:counter)&lt;/code&gt; later. When I
do this, the closest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; block in the tree for that thing is the one that gets used.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I don’t think it’s possible to implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; in JavaScript — at least not in the way it exists in RSpec. It
relies on
&lt;a href=&quot;https://www.leighhalliday.com/ruby-metaprogramming-method-missing&quot;&gt;Ruby meta-programming to intercept calls to missing methods&lt;/a&gt;,
which just doesn’t exist in JavaScript. The &lt;a href=&quot;https://github.com/enova/givens&quot;&gt;givens&lt;/a&gt; library does something pretty
close, but it relies on string keys to define things, and there’s a bit of extra work when working with TypeScript.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-big-deal&quot;&gt;What’s the big deal?&lt;/h2&gt;

&lt;p&gt;On the surface these two features don’t seem like much, but they provide a really powerful framework for organizing
test cases and the associated test setup.&lt;/p&gt;

&lt;p&gt;With the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; blocks being lazily evaluated, and override-able, I can set up data at the exact level of tests that
I need it. When I need to override it for a certain set of tests, I can put another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; block in that set. In
JavaScript I can define functions to set up my data for me with just the changes I need at each test level, or I
can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beforeEach&lt;/code&gt; blocks, but all that can get pretty noisy.&lt;/p&gt;

&lt;p&gt;And with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; blocks, I can more clearly lay out the scenarios of my tests. Yes, I &lt;em&gt;could&lt;/em&gt; just do this with
more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; blocks in JavaScript, but how often have you found JavaScript tests that actually do this? I’ve
personally seen/written too many tests to count named something like
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it(&quot;returns false when the flag is enabled, they're located in the US, but they have brown hair.&quot;)&lt;/code&gt;. That’s three
scenarios rolled into one test name. It works, but being able to nest different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; blocks to define my
complex scenarios is much easier to read.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Here’s an example of some tests I could write in RSpec with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Calculator&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.multiply&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the first value is negative&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the second value is negative&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns a positive number&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the second value is positive&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns a negative number&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HOW COOL IS THAT! Every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; block has &lt;em&gt;exactly&lt;/em&gt; the setup data it needs defined clearly inside it.
And each block has very little noise to distract you.&lt;/p&gt;

&lt;p&gt;Here’s what I’d do in JavaScript/Jest to accomplish something similar:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.multiply&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;second&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;when the first value is negative&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;when the second value is negative&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;returns a positive number&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;when the second value is positive&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;returns a negative number&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s definitely a bit more noise here, especially with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beforeEach&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; statements. It’s not a &lt;em&gt;lot&lt;/em&gt;
more noise, but it is definitely more noise.&lt;/p&gt;

&lt;p&gt;In real life I wouldn’t expect to find tests like the above JavaScript example. I’d expect to find the tests in
JavaScript looking more like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.multiply&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;returns a positive number when the first number is negative and the second number is negative&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;returns a negative number when the first number is negative and the second number is positive&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You could certainly make the case for this contrived example that &lt;em&gt;this&lt;/em&gt; is actually the most readable set of
tests, because there’s less code. I would have a hard time arguing. But most real-life tests are more complex than
these examples, with state and side-effects to mock out, and more scenarios and edge cases worth testing. Each test
case here includes multiple conditions, but there are only two permutations represented. Once things get a little
more complicated than these contrived examples, the RSpec tests become the clear winner for me — they’re easier to
read and manage, with their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; blocks more discretely describing your test scenarios.&lt;/p&gt;

&lt;p&gt;You could also argue that the bigger win here would be breaking scenarios into individual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; blocks in
JavaScript tests, instead of cramming the entire scenario into one long &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it(&quot;...&quot;)&lt;/code&gt; statement. I wouldn’t argue
that either.&lt;/p&gt;

&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;/h2&gt;

&lt;p&gt;The day after I wrote this article, a conversation started in the Artsy slack about how confusing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; was because
it moved variable initializations far away from where the tests used them.&lt;/p&gt;

&lt;p&gt;This makes sense! I think it points to two truths in software development:&lt;/p&gt;

&lt;h3 id=&quot;code-readability-is-subjective&quot;&gt;Code readability is subjective&lt;/h3&gt;

&lt;p&gt;For years I was convinced that practices like small functions or long and descriptive function names were
&lt;em&gt;objectively&lt;/em&gt; more readable. I leaned into this, and my code reviews almost always included comments on what I
thought would make the code more readable.&lt;/p&gt;

&lt;p&gt;As more people pushed back on my feedback over time, I realized that the feedback I was giving was &lt;em&gt;subjective&lt;/em&gt;. I
still like code that uses many short functions wired together, but not everyone finds that more readable! I’ve
stopped giving readability feedback on PRs, unless I can provide nearly-objective facts or scenarios that point to
a readability improvement.&lt;/p&gt;

&lt;p&gt;In this article, I find the RSpec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; examples to be much more readable than the JavaScript examples. But you and
your team might not! Maybe the distance between a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; block’s definition and its method’s usage makes it hard for
you to follow the test. That’s cool!&lt;/p&gt;

&lt;h3 id=&quot;any-cool-thing-can-be-abused&quot;&gt;Any cool thing can be abused&lt;/h3&gt;

&lt;p&gt;Earlier in this article I linked to &lt;a href=&quot;https://medium.com/@tomkadwill/all-about-rspec-let-a3b642e08d39&quot;&gt;an article that describes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; blocks in more detail&lt;/a&gt;. It includes
&lt;a href=&quot;https://www.rubydoc.info/github/rspec/rspec-core/RSpec%2FCore%2FMemoizedHelpers%2FClassMethods%3Alet&quot;&gt;a warning from the actual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; can enhance readability when used sparingly (1,2, or maybe 3 declarations) in any given example
group, but that can quickly degrade with overuse. YMMV.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve definitely seen code where I had a hard time following a stream of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; blocks. The RSpec example I gave
above reads nicely to me — but it’s probably teetering on the edge of where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; usage becomes confusing. I’m
guessing I have a slightly higher tolerance for this particular abstraction than my friends who don’t like
it…again pointing to readability being subjective.&lt;/p&gt;

&lt;p&gt;Having said all that — lately every time I try to write JavaScript tests, I find myself trying (unsuccessfully) to
recreate that RSpec example above. It represents exactly how I want to think about complex test scenarios. Each
level of the tests has exactly the setup that is unique to that level. There’s very little distraction or noise at
each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt;. It totally aligns with
&lt;a href=&quot;https://www.stevenhicks.me/blog/2018/01/chekhovs-gun-and-better-unit-tests/&quot;&gt;my desire to minimize irrelevant test setup&lt;/a&gt;.
I’m in ❤️ ❤️ ❤️ ❤️ ❤️.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;This post originally appeared on
&lt;a href=&quot;https://www.stevenhicks.me/blog/2021/09/what-javascript-tests-could-learn-from-rspec/&quot;&gt;Steve’s blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2021/09/10/what-javascript-tests-could-learn-from-rspec/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/09/10/what-javascript-tests-could-learn-from-rspec/</guid>
        
        
        <category>jest</category>
        
        <category>rspec</category>
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Unstructured Knowledge Sharing</title>
        <description>&lt;p&gt;We have a handful of regularly scheduled meetings in place at Artsy devoted to knowledge sharing.&lt;/p&gt;

&lt;p&gt;But what about the &lt;em&gt;unstructured&lt;/em&gt; ways in which we share knowledge? If structured sharing time demonstrates that a
team is &lt;em&gt;interested&lt;/em&gt; in spreading knowledge, &lt;em&gt;unstructured&lt;/em&gt; sharing time demonstrates that spreading knowledge is
the default mode for the team. Instead of the team forming habits of working in isolation or hoarding expertise,
they’ve formed habits of learning from and teaching each other.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Regularly scheduled meetings we have for knowledge sharing include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Team-based knowledge share meetings&lt;/li&gt;
  &lt;li&gt;Open office hours for anyone to bring questions&lt;/li&gt;
  &lt;li&gt;Lunch &amp;amp; learns for presenting across all of Artsy engineering&lt;/li&gt;
  &lt;li&gt;Show &amp;amp; tell, where attendees bring recent learnings or explorations to demo to the group&lt;/li&gt;
  &lt;li&gt;Peer learning groups that are dedicated to learning a specific topic in development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As &lt;a href=&quot;https://twitter.com/ashfurrow&quot;&gt;Ash&lt;/a&gt; mentioned in &lt;a href=&quot;https://artsy.github.io/blog/2020/12/09/share-your-knowledge/&quot;&gt;his article on knowledge shares&lt;/a&gt;, these are all great opportunities
for us to share knowledge. Learning is easy to de-prioritize in the face of shipping features, and scheduling these
meetings reinforces learning as a priority.&lt;/p&gt;

&lt;p&gt;Recently &lt;a href=&quot;https://github.com/damassi&quot;&gt;Chris Pappas&lt;/a&gt; pointed out the incredible value we get out of one specific Slack channel:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Shortest blog post of all time:&lt;br /&gt;“Add a &lt;a href=&quot;https://twitter.com/hashtag/dev?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#dev&lt;/a&gt;-help channel to your slack where devs can pose questions to the wider team. You won’t regret it!”&lt;br /&gt;-- Chris Pappas&lt;/p&gt;&amp;mdash; Artsy Open Source (@ArtsyOpenSource) &lt;a href=&quot;https://twitter.com/ArtsyOpenSource/status/1357819867638812672?ref_src=twsrc%5Etfw&quot;&gt;February 5, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;This piqued my interest. What unstructured/unscheduled things do we do at Artsy to demonstrate our emphasis on
learning?&lt;/p&gt;

&lt;h2 id=&quot;the-dev-help-slack-channel&quot;&gt;The #dev-help Slack Channel&lt;/h2&gt;

&lt;p&gt;We have many dev-specific channels set up in the Artsy Slack, but one in particular has become a massively
important knowledge-base for the entire team: the #dev-help channel.&lt;/p&gt;

&lt;p&gt;This channel is a place for engineers to post when they’re stuck. All engineers watch the #dev-help channel (to
some degree) and offer support when they can. Each issue is threaded to avoid noise in the channel. When the
question is answered, it gets marked as “solved” by applying a ✅ reaction. &lt;a href=&quot;https://github.com/pvinis&quot;&gt;Pavlos&lt;/a&gt; set up a Slack app
that auto-applies the ✅ reaction when someone says “solved” in the thread.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-05-11-unstructured-knowledge-sharing/dev-help.png&quot; alt=&quot;A question asked and answered in our #dev-help slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The cumulative result of the questions asked and answered in this channel is an incredible knowledge base for all
engineers. When I run into a new issue, the first place I search is #dev-help. More often than not I find my exact
problem already solved.&lt;/p&gt;

&lt;p&gt;This knowledge base is so important and powerful that it’s no longer only a place to &lt;em&gt;ask&lt;/em&gt; for help. Engineers will
also share problems they’ve &lt;em&gt;already solved&lt;/em&gt; in a new thread in the channel, in case someone else runs into the
problem. Usually we’ll tag these problems up front with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[already solved]&lt;/code&gt; or similar, to make it obvious no one
should spend cycles trying to solve this problem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-05-11-unstructured-knowledge-sharing/already-solved.png&quot; alt=&quot;An already-solved thread in our #dev-help slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One other important thing to say about the #dev-help channel: as engineers it’s tempting to solve problems with new
and novel tooling, but in the case of #dev-help we found a way to use our existing tooling in a slightly different
way. Sometimes the best solution is one you already have. We could have investigated dedicated software like Stack
Overflow for Teams, or we could have built our own knowledge-base tool. Instead we put some rules around how we
would use a Slack channel, and gained a huge benefit at a fraction of the cost.&lt;/p&gt;

&lt;h2 id=&quot;internal-live-streaming&quot;&gt;Internal Live-Streaming&lt;/h2&gt;

&lt;p&gt;Occasionally an Artsy engineer will broadcast that they’re taking on work that is ripe for knowledge-sharing, and
they’ll spin up a Zoom call for others to join. It might be something they know how to solve — like when
&lt;a href=&quot;https://github.com/anandaroop&quot;&gt;Roop&lt;/a&gt; spun up a call to walk through how he’d use &lt;a href=&quot;https://observablehq.com/&quot;&gt;Observable&lt;/a&gt; to explore search index
weighting. There might be more uncertainty to the problem, like when &lt;a href=&quot;https://github.com/pvinis&quot;&gt;Pavlos&lt;/a&gt; started up a call to
investigate a CI build failure using &lt;a href=&quot;https://git-scm.com/docs/git-bisect&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt;&lt;/a&gt;. It might be somewhere in between, like when
&lt;a href=&quot;https://github.com/admbtlr&quot;&gt;Adam&lt;/a&gt; was doing some refactoring of our React Native navigation.&lt;/p&gt;

&lt;p&gt;Sometimes this looks like a pairing or mobbing session, but sometimes it looks more like live-streaming. An
engineer is demonstrating by solving a real problem. If audience members can contribute, great — but they are also
welcome to tag along and learn.&lt;/p&gt;

&lt;h2 id=&quot;pairing&quot;&gt;Pairing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yuki24&quot;&gt;Yuki&lt;/a&gt; wrote on this blog &lt;a href=&quot;https://artsy.github.io/blog/2018/10/19/pair-programming/&quot;&gt;about pair-programming at Artsy&lt;/a&gt;. Pairing isn’t an unusual practice
for development teams….but there is something notable in regards to knowledge-sharing.&lt;/p&gt;

&lt;p&gt;We’re somewhere in the middle on the pairing frequency spectrum at Artsy. We don’t have dedicated pairs working on
problems together all day/every day. But we also don’t only pair when we’re stuck.&lt;/p&gt;

&lt;p&gt;Pairing when you’re stuck is great, and it can help move you forward on a problem. If that’s the only time you
pair, though, you’re missing out on a massive learning opportunity.&lt;/p&gt;

&lt;p&gt;Pairing to build a feature gives you exposure to an entire toolbox you might never have used before. How does your
pair approach a problem? How do they manage their time? What development tools do they use? What techniques do they
use for testing and debugging? How do they tighten their feedback loop? This is knowledge-sharing beyond the code
or the product you’re building — it’s knowledge-sharing of tools, skills, and habits.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What are the unstructured/unscheduled ways in which your team shares knowledge? Leave us a note in the comments!&lt;/p&gt;

</description>
        <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2021/05/11/unstructured-knowledge-sharing/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/05/11/unstructured-knowledge-sharing/</guid>
        
        
        <category>culture</category>
        
        <category>people</category>
        
        <category>teams</category>
        
      </item>
    
      <item>
        <title>Testing React Tracking with Jest and Enzyme</title>
        <description>&lt;p&gt;Recently, I needed to test a button that would make an analytics tracking call using
&lt;a href=&quot;https://github.com/NYTimes/react-tracking&quot;&gt;react-tracking&lt;/a&gt; and then navigate to a new page in a callback. This
presented some challenges - I wasn’t sure how to create a mocked version of react-tracking that would allow a
callback to be passed.&lt;/p&gt;

&lt;p&gt;With some help from fellow Artsy engineers &lt;a href=&quot;https://github.com/damassi&quot;&gt;Christopher Pappas&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/pvinis&quot;&gt;Pavlos Vinieratos&lt;/a&gt;, I got the tracking and testing to work. Here’s how we did it.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;a-little-context&quot;&gt;A little context&lt;/h1&gt;

&lt;p&gt;This work took place in Volt, our partner CMS (it’s sadly a private repository, but I’ll do my best to paste in
relevant code snippets so you’re not totally in the dark). Volt has been around for a long time and has had several
different client-side tracking implementations over the years. In this case, I wanted to take the opportunity to
bring Volt up to standard with our other big apps, &lt;a href=&quot;https://github.com/artsy/force/&quot;&gt;Force&lt;/a&gt; and
&lt;a href=&quot;https://github.com/artsy/eigen&quot;&gt;Eigen&lt;/a&gt;. They both use react-tracking and
&lt;a href=&quot;https://github.com/artsy/cohesion/&quot;&gt;Cohesion&lt;/a&gt;, our centralized analytics schema.&lt;/p&gt;

&lt;p&gt;Our use-case was a button that would navigate the user to a new page. The button had been implemented in a previous
PR, and now we wanted to make it execute a tracking call before navigating.&lt;/p&gt;

&lt;p&gt;We use Segment for tracking, and their tracking setup relies on a JS snippet being available on your pages. That
snippet sets a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.analytics&lt;/code&gt; property, which in turn
&lt;a href=&quot;https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#track&quot;&gt;has a&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.track()&lt;/code&gt;
method. On a fundamental level, all of our tracking calls boil down to a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.analytics.track()&lt;/code&gt;. We
pass a list of properties to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.track()&lt;/code&gt;, Segment receives the event and properties, and the resulting JSON is
stored in our data warehouse.&lt;/p&gt;

&lt;h1 id=&quot;adding-react-tracking&quot;&gt;Adding react-tracking&lt;/h1&gt;

&lt;p&gt;First, there was a bit of setup required to get react-tracking working. The react-tracking package
&lt;a href=&quot;https://github.com/NYTimes/react-tracking#custom-optionsdispatch-for-tracking-data&quot;&gt;assumes you’re using Google Tag Manager by default&lt;/a&gt;,
but allows you to override that behavior with a custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; function. In our case, we wrap our React apps in
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;BaseApp&amp;gt;&lt;/code&gt; component, so we added a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;TrackerContextCohesion&amp;gt;&lt;/code&gt; component with a custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; that would
be available to all of our React apps:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react-tracking&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// We're following the instructions from react-tracking's README on overriding the dispatch function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TrackerContextCohesion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// This is blank because we're not actually tracking a specific event here, just modifying dispatch&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// so that all components in the tree can use it&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;analytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BaseApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TrackerContextCohesion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/TrackerContextCohesion&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This allows us to make tracking calls in our components, including the passing of custom callback functions:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react-tracking&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@artsy/palette&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Assumes that MyComponent is wrapped in &amp;lt;BaseApp&amp;gt; wherever it's used, giving&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// it access to tracking context&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;somePropToTrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;andy-warhol&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Additional Segment options, e.g. integrations: { 'Intercom': false, }&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/artworks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Track&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;navigate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Box&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Being able to pass a callback was especially important in our case. We realized that if we needed to track &lt;em&gt;and
then navigate&lt;/em&gt;, the callback was necessary. In our testing, we saw that if we simply tried to fire the tracking
call then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.location.assign()&lt;/code&gt; synchronously, the tracking call might not get executed before the
navigation started, so we would effectively lose that event. Segment specifically
&lt;a href=&quot;https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#track&quot;&gt;allows you to pass a callback&lt;/a&gt;
to their tracking function to their track function for this situation. They describe the optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callback&lt;/code&gt;
parameter as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A function that is executed after a short timeout, giving the browser time to make outbound requests first.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus, we pass the tracking data and the callback to the custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;track&lt;/code&gt; call we implemented, and we’re good to go.&lt;/p&gt;

&lt;h1 id=&quot;the-problem-with-testing&quot;&gt;The problem with testing&lt;/h1&gt;

&lt;p&gt;Our use-case is simple enough, but we wanted to make sure that when the button was pressed, we would both execute
the tracking call and then navigate. A test checking that the navigation worked had already been implemented.
However, after moving the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.location.assign&lt;/code&gt; call into a callback, our test started failing because our
component was trying to execute a tracking call before navigating.&lt;/p&gt;

&lt;p&gt;The test that predated the addition of tracking looked like this:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;enzyme&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./MyComponent&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestApp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;testing/components/TestApp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Navigates to artworks page&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TestApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/TestApp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeCalledWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/artworks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we were rendering our button, clicking on it, and expecting to try to navigate. How could we mock our tracking
call while still executing a passed callback?&lt;/p&gt;

&lt;h1 id=&quot;the-final-solution&quot;&gt;The final solution&lt;/h1&gt;

&lt;p&gt;Our mock ended up looking like this:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;analytics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react-tracking&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;useTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s break that down section by section. First:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;analytics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As noted above, all of our tracking calls assume &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.analytics&lt;/code&gt; exists and that it has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.track()&lt;/code&gt; method. We
started by mocking that setup.&lt;/p&gt;

&lt;p&gt;Next:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react-tracking&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;useTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we mock the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-tracking&lt;/code&gt; package and two specific methods it exports, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useTracking&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;track&lt;/code&gt;. We made
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useTracking&lt;/code&gt; a Jest function - we’ll flesh it out further a few lines farther down in the file.&lt;/p&gt;

&lt;p&gt;Then there’s the mocking of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;track&lt;/code&gt;. To put it in words, our mock is: a function that returns a function that takes
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;children&lt;/code&gt; and returns those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;children&lt;/code&gt;. That might sound like gibberish at first blush, but essentially what
we’re doing is mocking the function composition we performed earlier when creating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrackerContextCohesion&lt;/code&gt;. We
needed something that was the same shape as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-tracking&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;track()&lt;/code&gt;, but we don’t care about overriding
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; in our mocks.&lt;/p&gt;

&lt;p&gt;Last:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trackEvent&lt;/code&gt; is a mock function that takes in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;args&lt;/code&gt; object and executes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;args.callback()&lt;/code&gt;. We then update our
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useTracking&lt;/code&gt; mock to make it return a function that returns an object with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trackEvent&lt;/code&gt; property. What a
mouthful! That sounds super confusing, but remember that we’re trying to mock something that we actually use like
this:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So basically, our goal was to mock &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trackEvent&lt;/code&gt; and we needed to emulate the shape it has when it’s exported by
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-tracking&lt;/code&gt;. Hopefully that makes things a little clearer.&lt;/p&gt;

&lt;p&gt;After some tinkering and eventually getting the mocks to work in a single test file, we moved these mocked
functions to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.ts&lt;/code&gt; file that all of our Jest tests load automatically. We chose to make these mocks
available to all tests because then we wouldn’t get surprising test failures if we, say, forgot that we were making
a tracking call in a component and didn’t explicitly mock the tracking calls in those tests.&lt;/p&gt;

&lt;p&gt;At the end of the day, we can use these mocked calls in our test files by doing the following:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;enzyme&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./MyComponent&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestApp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;testing/components/TestApp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react-tracking&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This only works because we mock tracking in setup.ts, and we only need to&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// declare it because we want to check how many times it was called. Also, it&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// would break the rules of hooks (https://reactjs.org/docs/hooks-rules.html)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// if it wasn't mocked. Tread cautiously!&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Calls tracking and navigates to artworks page&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TestApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/TestApp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeCalledWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/artworks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! If you’re trying to test something similar and found this post, I hope it helps you out. If so, or if
you’re still confused, leave a comment!&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2021/04/15/testing-react-tracking-with-jest-and-enzyme/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/04/15/testing-react-tracking-with-jest-and-enzyme/</guid>
        
        
        <category>cms</category>
        
        <category>enzyme</category>
        
        <category>react-tracking</category>
        
        <category>testing</category>
        
        <category>tracking</category>
        
        <category>volt</category>
        
      </item>
    
      <item>
        <title>Accessing the Relay Store Without a Mutation</title>
        <description>&lt;p&gt;I recently encountered a problem where client-side data (returned from a Relay query) became out of sync after a
user interaction. How can we make sure our data is consistent while maintaining a single source of truth? This post
explores why a developer might want to update client-side data locally, the basics of Relay and its store, and how
to delete records in the store when you’re not using a mutation.&lt;/p&gt;

&lt;h2 id=&quot;relay-x-artsy-x-me&quot;&gt;Relay x Artsy x Me&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://relay.dev/&quot;&gt;Relay&lt;/a&gt; is a GraphQL client library maintained by Facebook engineers and enables rapid client-side data
fetching in React applications. &lt;a href=&quot;https://artsy.github.io/blog/2019/04/10/omakase-relay/&quot;&gt;Artsy’s adoption of Relay&lt;/a&gt; coincided with our move
toward using React Native for our mobile work around 2016. I joined Artsy as an engineer in November of 2020 (after
&lt;a href=&quot;https://medium.com/swlh/how-losing-my-job-helped-me-find-my-way-back-8c8f86552acc&quot;&gt;transitioning to engineering from a non-technical role at the
company&lt;/a&gt;.) When I joined, I was about a year into React development
and completely new to Relay.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;I work on the Partner Experience (PX) team at Artsy. We build and maintain software used by our gallery and auction
house partners to sell artwork on Artsy. Although Relay is not new to Artsy, it’s relatively new to our team’s main
repository, Volt. (Volt is Artsy’s CMS used by gallery partners to manage their presences on the platform.) A topic
for another blog post, but Volt’s structure is worth noting here: Volt is a collection of mini React apps injected
into HAML views—our way of incrementally converting the codebase to our new stack.&lt;/p&gt;

&lt;p&gt;Relay’s biggest advantage in my eyes is how it tightly couples the client view and API call (in our case, to the
GraphQL layer of our stack, which we call Metaphysics.) In addition to performance and other benefits, colocating a
component with its data requirements creates a pretty seamless developer experience.&lt;/p&gt;

&lt;h2 id=&quot;building-an-artwork-checklist&quot;&gt;Building an Artwork Checklist&lt;/h2&gt;

&lt;p&gt;On the PX team, we recently launched a checklist feature aimed at empowering our gallery partners to be more
self-sufficient and find the greatest success possible on Artsy. The checklist prompts galleries to add specific
metadata to artworks that we know (because of our awesome data team) will make the work more likely to sell. The
new feature gathers a list of five high-priority artworks (meaning they are published, for-sale, and by a
top-selling artist) that are missing key pieces of metadata. The checklist prompts users to add the missing
metadata. Users also have the ability to click a button to “snooze” works, which removes them from the list for the
day.&lt;/p&gt;

&lt;figure class=&quot;illustration&quot;&gt;
    &lt;img src=&quot;https://user-images.githubusercontent.com/9466631/114630150-28886200-9c77-11eb-9f04-461101496ee0.png&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;The feature makes use of &lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt;, a key-value store used for in-memory cache, to store two lists:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includeIDs&lt;/code&gt; to store the five artworks in the list, so users see a consistent list of artworks whenever they
log in and load the page&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;excludeIDs&lt;/code&gt; or “snoozed” IDs which Redis will store for 24 hours and ensure the user does not see&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When a user presses the “snooze” button, the ID for the artwork is added to the snoozed list in Redis. The list of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includeIDs&lt;/code&gt; and the list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;excludeIDs&lt;/code&gt; are passed down from Rails controllers to our HAML views and then passed
as props into our React &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HomePageChecklist&lt;/code&gt; app. In our Checklist component, we use both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includeIDs&lt;/code&gt; and the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;excludeIDs&lt;/code&gt; as arguments passed to our Relay query to determine what is returned from Metaphysics (Artsy’s GraphQL
layer).&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworksMissingMetadata_partner&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Partner&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;argumentDefinitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;includeIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[String!]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;excludeIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[String!]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;artworksConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$first&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$after&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;includeIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$includeIDs&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;excludeIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$excludeIDs&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ArtworksMissingMetadata_partner_artworksConnection&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ArtworksMissingMetadataItem_artwork&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;problem-how-to-change-the-data-displayed-when-a-user-interacts-with-the-page&quot;&gt;Problem: How to Change the Data Displayed When a User Interacts with the Page&lt;/h2&gt;

&lt;p&gt;The problem we were running into occurs when the user presses “snooze” on an item. We successfully update Redis
with the new snoozed item, but the UI still renders the item on the page. (This is because the response from Relay
becomes stale.) If the user refreshes the page, the list is correct: The up-to-date Redis &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;excludeIDS&lt;/code&gt; list will be
passed into our component and used in the Relay query. But without refreshing the page, we need to make sure that
the list in the UI updates when the user snoozes an item.&lt;/p&gt;

&lt;p&gt;The initial fix was to use a local state variable to keep track of which items were snoozed. We defined the following variable in the parent
React component that renders the list:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localSnoozedItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setLocalSnoozedItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We passed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localSnoozedItems &lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setLocalSnoozedItems&lt;/code&gt; down to each of the children items. When the “snooze”
button was pressed on an item, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localSnoozedItems&lt;/code&gt; in the parent was updated with the complete list of snoozed
items. The parent then controls which items get rendered. We used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localSnoozedItems&lt;/code&gt; list to filter the connection
returned from our Relay query (which remember, is already filtered based on our Redis &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;excludeIDs&lt;/code&gt; from Redis.)&lt;/p&gt;

&lt;p&gt;This worked, but it definitely did not feel great to have two sources of truth for snoozing: The Redis key and the
local state variable.&lt;/p&gt;

&lt;h2 id=&quot;solution-deleting-a-record-from-the-relay-store&quot;&gt;Solution: Deleting a Record From the Relay Store&lt;/h2&gt;

&lt;p&gt;Cue the &lt;a href=&quot;https://relay.dev/docs/api-reference/store/&quot;&gt;RelayModernStore&lt;/a&gt;! I learned that Relay keeps track of the GraphQL
data returned by each query in a store on the client. Each record in the store has a unique ID, and the store can be
changed, added to, and deleted from. There are a couple of helpful blog posts (like
&lt;a href=&quot;https://yashmahalwal.medium.com/a-deep-dive-into-the-relay-store-9388affd2c2b&quot;&gt;this&lt;/a&gt; and
&lt;a href=&quot;https://medium.com/entria/wrangling-the-client-store-with-the-relay-modern-updater-function-5c32149a71ac&quot;&gt;this&lt;/a&gt;) that explain the store and how to
interact with it.&lt;/p&gt;

&lt;p&gt;In most of the Relay documentation, blog posts, and Artsy’s uses cases, the store is accessed through an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updater&lt;/code&gt;
function via &lt;a href=&quot;https://relay.dev/docs/guided-tour/updating-data/graphql-mutations/&quot;&gt;mutations&lt;/a&gt;. &lt;a href=&quot;https://relay.dev/docs/guided-tour/updating-data/graphql-mutations/#updater-functions&quot;&gt;Updater functions&lt;/a&gt;
that return the store in the first argument can optionally be added to Relay mutations. Inside that function, you can access
the store to modify the records you need.&lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;commitMutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaultEnvironment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`
    mutation SomeMutation {
      ...
    }
  `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;updater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do something with the store&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my use case, I was not using a Relay mutation because I did not need to modify anything on the server. Since
Redis is keeping track of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;excludeIDs&lt;/code&gt; for us, any round trip to the server will be up-to-date. We just need to
modify our local data store.&lt;/p&gt;

&lt;p&gt;Relay provides a &lt;a href=&quot;https://relay.dev/docs/guided-tour/updating-data/local-data-updates/&quot;&gt;separate API method to make local updates&lt;/a&gt; to the Relay
store: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commitLocalUpdate&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commitLocalUpdate&lt;/code&gt; takes two arguments: the first is the Relay environment, which you
can easily access from the parent Relay fragment or refetch container. The second is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updater&lt;/code&gt; callback function
that returns the store in the first argument. We now have access to the store!&lt;/p&gt;

&lt;h2 id=&quot;deleting-a-connection-node-with-connectionhandler&quot;&gt;Deleting a Connection Node with ConnectionHandler&lt;/h2&gt;

&lt;p&gt;My main hurdle during this journey was finding an appropriate way to hook into the store for our specific use case—when we do
not require an update to server data.&lt;/p&gt;

&lt;p&gt;But to close us out: Let’s finish the job and delete the item from the connection in the store.&lt;/p&gt;

&lt;p&gt;When an item is snoozed, we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commitLocalUpdate&lt;/code&gt;, pass in the Relay environment, and then pass in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updater&lt;/code&gt;
function. Once we have access to the store, our goal is to delete this particular item from the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;artworksConnection&lt;/code&gt;, which is the GraphQL object returned by our original Relay query.&lt;/p&gt;

&lt;p&gt;Because we are dealing with connections, we want to use the &lt;a href=&quot;https://relay.dev/docs/api-reference/store/#connectionhandler&quot;&gt;ConnectionHandler
API&lt;/a&gt; provided by Relay. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConnectionHandler.getConnection&lt;/code&gt; takes in the
connection’s parent record (which we can find using the GraphQL ID added as a field on our query for the
connection) as the first argument and the connection key which can be provided through &lt;a href=&quot;https://www.prisma.io/blog/relay-moderns-connection-directive-1ecd8322f5c8&quot;&gt;Relay’s @connection
directive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once we have the connection, we will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConnectionHandler.deleteNode&lt;/code&gt; which takes the connection as the first
argument and the id to be deleted, which we can also easily access using the GraphQL ID added as a field to the
query for the item.&lt;/p&gt;

&lt;p&gt;Bonus: Because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commitLocalUpdate&lt;/code&gt; works anywhere in Relay land, we got to perform this deletion exactly where the
“snooze” action is happening: in the child item component. (In our previous solution, we had to manage the state of
the children from their parent component, which wasn’t as intuitive.)&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commitLocalUpdate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;relay-runtime&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;commitLocalUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentRecord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;artworksConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConnectionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;parentRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ArtworksMissingMetadata_partner_artworksConnection&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artworksConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ConnectionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deleteNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artworksConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Relay is great because it colocates a component with its data requirements.&lt;/li&gt;
  &lt;li&gt;The Relay store allows us to access and modify data that we are using on the client.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commitLocalUpdate&lt;/code&gt; provides us access to the store if we just need to modify local data and aren’t using a
mutation to update server-side data.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2021/04/15/accessing-the-relay-store/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/04/15/accessing-the-relay-store/</guid>
        
        
        <category>graphql</category>
        
        <category>react</category>
        
        <category>redis</category>
        
        <category>relay</category>
        
        <category>tooling</category>
        
      </item>
    
      <item>
        <title>Strategies For Small, Focused Pull Requests</title>
        <description>&lt;p&gt;A common suggestion for improving pull requests (PRs) is to “make your PR small and focused”. I myself gave this suggestion in &lt;a href=&quot;https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/&quot;&gt;a recent article on this very blog about including context in PRs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like most internet advice, this can feel like the &lt;a href=&quot;https://knowyourmeme.com/memes/how-to-draw-an-owl&quot;&gt;“draw the rest of the owl”&lt;/a&gt; meme. Even if we’re in agreement that I &lt;em&gt;should&lt;/em&gt; make a PR smaller…&lt;strong&gt;&lt;em&gt;how&lt;/em&gt;&lt;/strong&gt; do I do it? How do I avoid a big PR when there’s a lot of cross-cutting changes to make? How do I create small, focused units of work when I’m building a large feature? How can I overcome my perfectionism and submit a PR that feels incomplete to me because the edges aren’t all polished?&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;what-is-small-and-focused&quot;&gt;What is “small and focused”?&lt;/h2&gt;

&lt;p&gt;Not all small PRs are focused. I might sneak five unrelated one-line changes into a PR. While it feels like that will enable me to move quickly, it also runs the risk of four unrelated changes being held up in review because the other is controversial.&lt;/p&gt;

&lt;p&gt;Not all focused PRs are small. I might put an entire feature in one PR, and while it is focused, it’s still going to be difficult for you to review the large amount of changes thoroughly.&lt;/p&gt;

&lt;p&gt;To make our PR reviewers’ jobs easier, we’re looking for the intersection of small &lt;em&gt;and&lt;/em&gt; focused. Changes that are cohesive and without distractions. Code that accomplishes one small thing.&lt;/p&gt;

&lt;p&gt;Note that the recommendation for “small and focused” PRs does &lt;strong&gt;not&lt;/strong&gt; include the word “complete”. I’m a perfectionist and I like my work to be very polished before it’s done, but when we’re iterating quickly the polish can come in a follow-up PR. This is the biggest challenge I’ve had as an Artsy engineer — finding the balance between polish and iteration. Artsy’s core values include &lt;a href=&quot;https://github.com/artsy/README/blob/ccfbba13ead7cb6586d2d9bf088e5180907be07b/culture/what-is-artsy.md#impact-over-perfection&quot;&gt;Impact Over Perfection&lt;/a&gt; but my personal values include “make things &lt;em&gt;real good&lt;/em&gt;” and it can be hard for me to navigate that tension.&lt;/p&gt;

&lt;h3 id=&quot;integrating-code-a-little-at-a-time&quot;&gt;Integrating code a little at a time&lt;/h3&gt;

&lt;p&gt;A caveat: the recommendations in this article assume you can integrate code a little bit at a time. I’ve worked on teams and projects where we used very long-lived branches for features or even epic — I know those environments exist. This article is probably not the one that will convince you to move to &lt;a href=&quot;https://trunkbaseddevelopment.com/&quot;&gt;trunk-based development&lt;/a&gt;; it also might be less useful without trunk-based development.&lt;/p&gt;

&lt;p&gt;Having said that, even with long-lived feature branches you can introduce code &lt;em&gt;into those branches&lt;/em&gt; a little bit at a time. PRs can be opened against &lt;em&gt;any&lt;/em&gt; branch, not just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A couple strategies we use at Artsy for integrating code a little bit at a time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://trunkbaseddevelopment.com/feature-flags/&quot;&gt;Feature toggles&lt;/a&gt;&lt;/strong&gt;. &lt;a href=&quot;https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/&quot;&gt;Ash wrote about Echo&lt;/a&gt;, a service for toggling features on mobile devices, but we have additional ways for enabling/disabling features at the system &lt;em&gt;or&lt;/em&gt; user level. When we introduce new code we can hide it behind a feature flag until we’re ready for everyone to see it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“Hidden” routes&lt;/strong&gt;. Often when we redesign or modernize an existing route on Artsy.net we’ll create a &lt;em&gt;second&lt;/em&gt; similar route. We hide the in-progress page behind that new route and don’t share it until it’s ready. 🤫&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Armed with tools for integrating code incrementally, here are some strategies for reducing the size and scope of a PR. I’m not suggesting you use these strategies universally, but if you think you’re headed toward a very large PR, these are some things to try.&lt;/p&gt;

&lt;h2 id=&quot;start-with-small-scope--slice-your-stories-small&quot;&gt;Start with small scope — slice your stories small&lt;/h2&gt;

&lt;p&gt;One of the most valuable lessons I learned as a consultant with a company focused on agile development is that you can almost always slice a story smaller. You can do this by sacrificing quality, but you can also (and probably should) do it by cutting scope. We can ship a new screen for our app sooner if we focus on building the most absolutely critical features first, and follow up with the valuable-but-not-critical features later.&lt;/p&gt;

&lt;p&gt;There are many ways to break a story smaller, and all of them enable you to integrate code sooner in the form of smaller PRs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Separate CRUD (Create, Read, Update, Delete) operations and ship them one at a time&lt;/li&gt;
  &lt;li&gt;Separate by user role&lt;/li&gt;
  &lt;li&gt;Separate individual edge cases&lt;/li&gt;
  &lt;li&gt;Separate a simplified experience from an enhanced version&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Think of these smaller scoped features as self-contained vertical slices of functionality. As each one is released, users can take advantage of them, and your team can start building the next slice.&lt;/p&gt;

&lt;h2 id=&quot;pr-by-architectural-layer&quot;&gt;PR by architectural layer&lt;/h2&gt;

&lt;p&gt;Rather than building an entire feature end-to-end before creating a pull request, consider integrating one layer at a time. Embrace the boundaries between the front and back ends of your code — submit a PR to introduce changes to the API, and once it’s merged follow up with another PR to introduce changes to the UI.&lt;/p&gt;

&lt;p&gt;Depending on the architecture of your system, you might already be forced to this. At Artsy, our &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;web app lives in one repo&lt;/a&gt;, our &lt;a href=&quot;https://github.com/artsy/metaphysics&quot;&gt;GraphQL endpoint lives in another&lt;/a&gt;, and many services are separated into repositories behind that. We &lt;em&gt;must&lt;/em&gt; integrate our features one layer at a time. Here’s an example where &lt;a href=&quot;https://artsy.github.io/author/matt/&quot;&gt;Matt&lt;/a&gt; &lt;a href=&quot;https://github.com/artsy/metaphysics/pull/2819/files&quot;&gt;added a field to our API&lt;/a&gt; in one PR, and &lt;a href=&quot;https://github.com/artsy/force/pull/6613&quot;&gt;propagated it to the UI&lt;/a&gt; in a separate PR. Even if you don’t have a repository boundary between your API and your UI, splitting PRs at this logical boundary can help make them more digestible.&lt;/p&gt;

&lt;p&gt;The suggestion to PR by architectural layer is not in conflict with slicing stories small — in fact, these two strategies complement each other nicely. A PR that contains multiple features but only one layer is probably large enough to be difficult to review; so is a PR that contains one feature end-to-end. A PR containing one layer of one feature can be easier to review.&lt;/p&gt;

&lt;h2 id=&quot;build-a-walking-skeleton&quot;&gt;Build a walking skeleton&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;walking-skeleton&quot;&gt;walking skeleton&lt;/a&gt; is a bare-bones, stripped down implementation of your feature from end-to-end. It connects the UI all the way to the data source. Very little of the feature is presented, but what is there is fully functional.&lt;/p&gt;

&lt;p&gt;Start a new feature with a walking skeleton PR to demonstrate connectivity of the pieces involved. It won’t do very much — maybe it only displays one field — but that’s okay because no one’s going to see it yet. The important thing is that the moving pieces are all connected — the database, the API, the UI.&lt;/p&gt;

&lt;p&gt;Once a walking skeleton PR is merged, you can start filling in the skeleton. Each new sub-feature can be its own PR.&lt;/p&gt;

&lt;p&gt;This is a great approach if your team is looking to swarm on a feature. If we all work on our own sub-features without first merging a walking skeleton, we’re likely to face some intense merge conflict headaches when we realize we’ve all connected the full stack in slightly different ways. Starting with a walking skeleton removes a lot of those merge conflicts, because we’re mostly bolting fields on to existing infrastructure along the way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/relay-workshop/pull/1&quot;&gt;This PR&lt;/a&gt; is an example of a walking skeleton. My goal was to stand up an app that connected &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://relay.dev/&quot;&gt;Relay&lt;/a&gt;, and &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;. &lt;a href=&quot;https://github.com/artsy/relay-workshop/pull/1/files#diff-26ad4b834941d9b19ebf9db8082bd202aaf72ea0ddea85f5a8a0cb3c729cc6f2R25&quot;&gt;The actual app doesn’t display very much&lt;/a&gt; — just enough to prove that the pieces were all working.&lt;/p&gt;

&lt;h2 id=&quot;separate-riskycontroversial-work-from-routine-work&quot;&gt;Separate risky/controversial work from routine work&lt;/h2&gt;

&lt;p&gt;It’s not always possible to identify ahead of time which work will prompt more discussion during review, but sometimes it’s obvious. Novel work that takes thoughtful consideration of multiple approaches is much more likely to invite feedback than work that follows existing patterns.&lt;/p&gt;

&lt;p&gt;Routine implementation can be a noisy distraction in a PR that also contains a unique function that you really want reviewers to see. You should point out the unique bits in the PR body if they’re combined, but you also might consider separating the less-interesting implementation into its own PR.&lt;/p&gt;

&lt;p&gt;The worst review you can get on a PR that contains both novel and routine work is “LGTM!” (looks good to me). It likely means the reviewer couldn’t separate the signal from the noise and overlooked the bits that required more thought and effort.&lt;/p&gt;

&lt;h2 id=&quot;separate-infrastructural-work-from-implementations&quot;&gt;Separate infrastructural work from implementations&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/T-shaped_skills&quot;&gt;t-shaped person&lt;/a&gt; is someone with a lot of shallow experience in many areas, and deep expertise in one or a few areas. Their skills are wide at the base, and tall and narrow in their area of focus.&lt;/p&gt;

&lt;p&gt;Code can have a similar shape. Infrastructural work tends to be wide and shallow — it touches a lot of places in your code, but it doesn’t go deep in any of them. Implementation work tends to be the opposite — it doesn’t affect the entire app, but it goes very deep for one feature.&lt;/p&gt;

&lt;p&gt;We probably review infrastructural changes differently than we review implementation changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Infrastructural work deserves scrutiny for the abstractions it introduces and how it might affect performance or future implementations. These kinds of changes introduce new patterns to the codebase and we want to make sure they’re useful and usable patterns.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An individual implementation gets more scrutiny on user-facing details. It’s probably combining &lt;em&gt;existing&lt;/em&gt; patterns, so we’ll spend less time looking at abstractions. We’ll spend more time confirming it works for our users.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a large PR combines wide, shallow, abstract work with deep, narrow, concrete work, it requires the reviewer to shift between two different mindsets. You might consider breaking your PR into two: one containing the wide infrastructural work, and one containing the deep implementation work. This allows reviewers to focus on abstractions in one PR and user-facing details in the other.&lt;/p&gt;

&lt;p&gt;Some examples of infrastructural changes that could be separated from implementation work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We introduced a seam to the code in order to make room for our implementation.&lt;/li&gt;
  &lt;li&gt;We updated a dependency to take advantage of a new feature.&lt;/li&gt;
  &lt;li&gt;We refactored before we started our implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;separating-an-already-large-pr&quot;&gt;Separating an already-large PR&lt;/h2&gt;

&lt;p&gt;It’s natural for PRs to grow large. &lt;a href=&quot;https://thedecisionlab.com/biases/optimism-bias/&quot;&gt;Optimism bias&lt;/a&gt; diminishes our ability to estimate work often resulting in more code changes than we expected. A feature seems like it won’t take much work until you get deeper and find complexity in places you hadn’t considered. There’s a lot of uncertainty when you start working on a feature and we’d need to model the entire problem to completion to know what the PR was going to look like before we started. A PR seems like it will be small until suddenly…it isn’t anymore.&lt;/p&gt;

&lt;p&gt;This is what usually prevents developers from separating PRs — by the time you recognize the PRs could be de-tangled, it seems like a lot of effort to de-tangle them.&lt;/p&gt;

&lt;p&gt;When you’ve got a PR/branch that contains multiple lines of work and you want to separate them, &lt;a href=&quot;https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;&lt;/a&gt; is your best friend. Rebasing enables you to rename, reorder, combine, and separate commits. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; to group your commits into one set for each branch you want to extract, and submit a PR for each smaller set of changes.&lt;/p&gt;

&lt;p&gt;Good commit hygiene makes it easier to rebase commits. Commit small units of work so that they can be re-ordered and grouped, and apply clear messages to each commit in case you need to move it. While you might not &lt;em&gt;always&lt;/em&gt; separate/rebase PR branches, you’ll appreciate small commits with clear messages when you do.&lt;/p&gt;

&lt;h2 id=&quot;small-prs-start-long-before-the-work-starts&quot;&gt;Small PRs start long before the work starts&lt;/h2&gt;

&lt;p&gt;The size of a pull request can be influenced long before the PR is opened. Slice features small in your product backlog; make small commits along the way; combine small commits into small pull requests. Among other benefits, a focus on breaking work into small parts will make it easier to review your changes.&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests/</guid>
        
        
        <category>community</category>
        
        <category>engineering</category>
        
        <category>github</category>
        
        <category>team</category>
        
        <category>tools</category>
        
      </item>
    
      <item>
        <title>Why Asking for Help Strengthens Engineering Teams</title>
        <description>&lt;p&gt;I know that for many developers, especially those early in their careers, asking for help can be intimidating. I
often fear wasting someone’s time or exposing myself as less skilled or smart than my team initially thought.&lt;/p&gt;

&lt;p&gt;In my first month as a software engineer at Artsy (and barely six months into life as an engineer after
&lt;a href=&quot;https://medium.com/swlh/how-losing-my-job-helped-me-find-my-way-back-8c8f86552acc&quot;&gt;transitioning from a career in communications&lt;/a&gt;), I was struggling
through a ticket assigned to me as a “good first issue.” (The team estimated the task to be straightforward enough
for someone new to the team.) After a few hours stumbling between the ticket, my code, and Google, I made very
little progress.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Early and often, my fellow engineers at Artsy encourage me to ask for help when I hit roadblocks. Even with the
support explicitly offered to me, I was shaky. The extra 10 seconds it took to type out my question in Slack was
just enough time for me to chicken out.&lt;/p&gt;

&lt;p&gt;Opening up with my team members about my concerns, I learned that asking for help is not just for me but ultimately
benefits my team. Sharing their insights below, I hope other engineers, early-career or not, feel empowered to ask
questions, stay curious, and prioritize learning for themselves and their team — all hallmarks of great engineers.&lt;/p&gt;

&lt;h2 id=&quot;why-its-so-hard-to-ask-for-help&quot;&gt;Why It’s So Hard to Ask For Help&lt;/h2&gt;

&lt;p&gt;Working in tech and as an engineer (and even in &lt;a href=&quot;https://medium.com/better-programming/why-women-dont-pursue-software-engineering-17d0dead24e9&quot;&gt;undergraduate computer science
classes&lt;/a&gt;,) I often felt surrounded by people smarter than me.
Operating alongside peers who are excelling motivates me to set the bar higher for myself. But at times, it can
also be intimidating. There is a reason that imposter syndrome is so pervasive in tech industry discourse. (A 2018
study found that &lt;a href=&quot;https://www.cnet.com/news/tech-employees-likely-to-suffer-from-impostor-syndrome/&quot;&gt;58% of tech workers suffer from
it&lt;/a&gt;.) The fear of being “found out” as an imposter,
inadequate, or less impressive can be especially acute for those early in their career and from &lt;a href=&quot;https://zora.medium.com/why-imposter-syndrome-is-worse-for-women-of-color-3bcf37335405&quot;&gt;underrepresented
groups&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like other VC-backed companies, Artsy is working toward aggressive business targets and ships software at a high
velocity. At high-growth companies, tight deadlines and high-energy cultures make it tempting to shy away from hard
problems and to let the more senior people tackle the tough challenges. But these moments are critical for growth
and learning across the team.&lt;/p&gt;

&lt;figure class=&quot;illustration&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;https://www.artsy.net/artwork/pipilotti-rist-help-me&quot;&gt;
        &lt;img src=&quot;https://d32dm0rphc51dk.cloudfront.net/P24AUuVFX50Tr2Q6w58-fQ/large.jpg&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;Pipilotti Rist, Help me, 2016, Hauser &amp;amp; Wirth, available on Artsy
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;rethinking-productivity&quot;&gt;Rethinking Productivity&lt;/h2&gt;

&lt;p&gt;On Artsy’s engineering team, we put a lot of energy into optimizing developer workflows and communication channels.
While asking for help seemed counter to productivity, my team helped me see that the opposite is true: Encouraging
engineers to support one another is integral to building an effective engineering organization.&lt;/p&gt;

&lt;p&gt;Pair programming is growing in popularity, not because society is becoming more kind and patient, but because it’s
good for business. Teams in synergy can &lt;a href=&quot;https://martinfowler.com/articles/on-pair-programming.html&quot;&gt;ship higher-quality code more quickly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because teaching is one of the best ways to become an expert, a more experienced engineer can level up when pairing
with a less experienced engineer. Teaching solidifies understanding, reveals gaps in knowledge, and opens up new
questions for exploration. Recently, a senior engineer shared that they never questioned something in our codebase
until I prompted them to take a closer look. We deepened our understanding together.&lt;/p&gt;

&lt;p&gt;Providing help also cultivates an engineer’s mentoring skills, which is especially important if they aim for
management or leadership roles.&lt;/p&gt;

&lt;p&gt;Finally, a lot of people enjoy helping others for the pure reason that it feels good. Studies show that a majority
of workers prioritize meaning in their work over salary and that meaningful work translates to greater retention
and productivity. (&lt;a href=&quot;https://hbr.org/2018/11/9-out-of-10-people-are-willing-to-earn-less-money-to-do-more-meaningful-work&quot;&gt;Harvard Business Review&lt;/a&gt; goes
so far as attaching a dollar sign to meaningful work: they estimate highly meaningful work generates an extra
$9,078 per worker per year and saves an average of $6.43 million in annual turnover-related costs for every 10,000
workers.) All good arguments for engaging in collaborative and empathetic workflows.&lt;/p&gt;

&lt;h2 id=&quot;building-community-and-scaling-knowledge&quot;&gt;Building Community and Scaling Knowledge&lt;/h2&gt;

&lt;p&gt;Building a culture of collaboration is particularly challenging, especially for distributed teams and those working
remotely during the pandemic. Pair programming provides opportunities for connecting, which can reverberate
throughout an organization.&lt;/p&gt;

&lt;p&gt;Learning also has a network effect, so knowledge scales exponentially. If someone teaches me a new concept, I am
now empowered to share the knowledge with others, and then they can then spread that knowledge even further.&lt;/p&gt;

&lt;p&gt;Put simply by one of my coworkers: Learning is contributing.&lt;/p&gt;

&lt;figure class=&quot;illustration&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;https://www.artsy.net/artwork/richard-artschwager-question-mark&quot;&gt;
        &lt;img src=&quot;https://d32dm0rphc51dk.cloudfront.net/fccQIzHtxIwf2eHTrEg0Dw/large.jpg&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;Richard Artschwager, Question Mark, 2001, Gagosian, available on Artsy
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;why-prioritizing-your-growth-is-okay&quot;&gt;Why Prioritizing Your Growth is Okay&lt;/h2&gt;

&lt;p&gt;My natural tendency is to want to give more than I ask. But for all early-career engineers, it is also normal to
need a lot of help at the beginning. I need to trust that our recruitment team knew to ask the right questions to
make an informed decision to hire me — the real me, beginner and all. The fastest way to improve is to tackle
difficult problems head-on and ask questions when I need support. Investing in my learning at this point in my
career will pay dividends to my team in the months and years to come.&lt;/p&gt;

&lt;p&gt;So yes, I went ahead and pressed send on that Slack to ask for help.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;This post originally appeared on Anna’s blog on &lt;a href=&quot;https://anna-carey.medium.com/&quot;&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2021/02/11/asking-for-help/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/02/11/asking-for-help/</guid>
        
        
        <category>community</category>
        
        <category>culture</category>
        
        <category>learning</category>
        
        <category>teaching</category>
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>Introducing Artsy Engineering Radio</title>
        <description>&lt;p&gt;Available now on &lt;a href=&quot;https://podcasts.apple.com/us/podcast/artsy-engineering-radio/id1545870104&quot;&gt;Apple Podcasts&lt;/a&gt;, &lt;a href=&quot;https://open.spotify.com/show/0gJYxpqN6P11dbjNw8VT2a?si=L4TWDrQETwuVO6JR1SOZTQ&quot;&gt;Spotify&lt;/a&gt;, and coming soon elsewhere, is Artsy
Engineering Radio!&lt;/p&gt;

&lt;p&gt;Solving problems in the world of software engineering can mean a lot of different things, and this podcast will
explore what that looks like at Artsy. If you’ve followed our blog, you can expect a podcast that sounds like it.
There are a ton of amazing engineers here at Artsy and we’re excited for you to hear their voices and stories. Our
hope is that this podcast will make it easy for more engineers at Artsy to contribute to the public persona of
Artsy Engineering.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;We’ll release new episodes every other week. Our target episode length is 30 minutes. Some episodes will be
technical and others less so. Because
&lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default&quot;&gt;we work in the open&lt;/a&gt;
it’s easy for us to talk about our work in public.&lt;/p&gt;

&lt;p&gt;This isn’t the first attempt at an Artsy engineering podcast! Our engineering team has attempted multiple times to
start one. When &lt;a href=&quot;https://artsy.github.io/author/jonallured/&quot;&gt;Jon&lt;/a&gt; went to create new Slack and Notion hubs, he found that both already existed. The
&lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/368&quot;&gt;PR for the podcast RSS feed&lt;/a&gt; was opened in July, 2017!&lt;/p&gt;

&lt;p&gt;We’re beating the fizzle this time, though. We’ve got momentum and enthusiasm on our side — several episodes are
already published and we’ve got more lined up. Instead of tinkering with tooling we’re focusing on making episodes,
even if they aren’t perfect. Like the software we build, the podcast will get better over time as we iterate.&lt;/p&gt;

&lt;p&gt;What do we have so far? In
&lt;a href=&quot;https://podcasts.apple.com/us/podcast/0-introducing-artsy-engineering-radio/id1545870104?i=1000503035175&quot;&gt;episode 0&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/author/jonallured/&quot;&gt;Jon&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/author/matt-dole/&quot;&gt;Matt&lt;/a&gt;, and &lt;a href=&quot;https://artsy.github.io/author/steve-hicks/&quot;&gt;Steve&lt;/a&gt; introduced the podcast and talked about what you can expect from
future episodes. &lt;a href=&quot;https://podcasts.apple.com/us/podcast/1-how-to-have-good-meetings/id1545870104?i=1000503035176&quot;&gt;Episode 1&lt;/a&gt; features a conversation with &lt;a href=&quot;https://artsy.github.io/author/ash/&quot;&gt;Ash&lt;/a&gt; about facilitating meaningful and
inclusive team meetings, and how meetings are part of building teams, trust, and systems. &lt;a href=&quot;https://podcasts.apple.com/us/podcast/2-how-artsy-hires-engineers/id1545870104?i=1000504558896&quot;&gt;Episode 2&lt;/a&gt; is
a conversation between &lt;a href=&quot;https://artsy.github.io/author/steve-hicks/&quot;&gt;Steve&lt;/a&gt; and &lt;a href=&quot;https://artsy.github.io/author/ash/&quot;&gt;Ash&lt;/a&gt; about how Artsy hires engineers.&lt;/p&gt;

&lt;p&gt;Find the first few episodes right now in your podcast player. Watch for future episodes in your feed and we’ll
announce them &lt;a href=&quot;https://twitter.com/artsyopensource&quot;&gt;on Twitter&lt;/a&gt; when they’re released.&lt;/p&gt;

</description>
        <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2021/01/06/introducing-artsy-engineering-radio/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/01/06/introducing-artsy-engineering-radio/</guid>
        
        
        <category>community</category>
        
        <category>learning</category>
        
        <category>podcast</category>
        
      </item>
    
      <item>
        <title>Echoes From the Past: Supporting Old App Versions</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal/&quot;&gt;In, a recent blog post&lt;/a&gt;, I discussed a fundamental difference between web and iOS deployments. Web software is deployed to servers that are under your control, while iOS software is deployed to users’ devices that you have &lt;em&gt;no&lt;/em&gt; control over. This distinction really changes how you think about the code that you ship, because that code could be running indefinitely on devices that never get updated.&lt;/p&gt;

&lt;p&gt;The previous post focused on this distinction through the lens of accidentally shipping (and then fixing) a bug. This focus on bugs is important, but focusing &lt;em&gt;only&lt;/em&gt; on bugs left me unable to articulate an important, nuanced distinction between hosting code and shipping app binaries. So let’s dive in.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Software, ideally, is made up of more than just bugs; it has working code, too! Just like with (accidentally) shipping bugs, you need to be aware that the working code you ship is &lt;em&gt;also&lt;/em&gt; going to be running indefinitely. That puts pressure on developers to make sure that the code in their apps will continue to function correctly, even as (for example) the web APIs that the apps rely on get updated over time.&lt;/p&gt;

&lt;h2 id=&quot;a-case-study&quot;&gt;A Case Study&lt;/h2&gt;

&lt;p&gt;Artsy’s iOS app relies on a services we call “&lt;a href=&quot;https://github.com/artsy/echo&quot;&gt;Echo&lt;/a&gt;” to serve remote configuration. This lets Artsy do things like selectively disable features (for example, to make non-backwards-compatible API changes), provide changes to URL-routing (to match corresponding changes to web URLs), or even to &lt;em&gt;require&lt;/em&gt; users on older versions of the app to update (which we have never had to do). Echo has helped Artsy meet its business goals and building this remote configuration for the app was a great idea.&lt;/p&gt;

&lt;p&gt;However… Echo was built as a general-purpose remote-configuration-as-a-service, in anticipation of being used by other apps. That use never materialized. It had a web portal and a database and an API, all to only ever serve a single JSON response to the app. That’s fine, sometimes engineers build things that don’t end up getting used widely as we expected. Echo did one thing, and it did it really well. It ran on a Hobby Dyno on Heroku without incident for years.&lt;/p&gt;

&lt;p&gt;If you think about what I’ve discussed so far in this post, you may realize that the app &lt;em&gt;depends&lt;/em&gt; on Echo. If Echo changes in some non-backwards-compatible way, then the app could break. For example, if Echo happened to stop working entirely, then the app could stop working too.&lt;/p&gt;

&lt;p&gt;The Echo service went without being deployed for several years. It worked, so why update it? The problem was that at some point, its major dependencies got yanked, so we could no longer build it locally or even deploy it at all. Yikes. I asked a web colleague for help and our conclusion was that it would take more effort to get Echo working with its existing code than it would be to rebuild the whole thing. Double yikes. And finally, Echo was running on the &lt;a href=&quot;https://devcenter.heroku.com/articles/cedar-14-stack&quot;&gt;Cedar-14 Heroku stack&lt;/a&gt;, which was already at end-of-life and had stopped receiving security updates. Triple yikes.&lt;/p&gt;

&lt;p&gt;(I have to note here that most of services at Artsy are deployed almost constantly – Echo was an odd one out. Echo never needed any updates, so it never needed to be deployed. However, we should have been keeping its dependencies up to date and deploying it regularly, which would have uncovered its problems sooner when they were still easily fixed. Anyway!)&lt;/p&gt;

&lt;p&gt;So we have a service, Echo, that we can’t develop, and can’t deploy, and isn’t getting security updates from our cloud provider. And the app depends on it. Since Echo had always been a bit over-engineered for what it ended up being, I wondered what the minimal replacement could be. My plan was to replace the Echo server with an S3 bucket, an Artsy-controlled CNAME DNS record, and a small shell script that runs automatically on CI.&lt;/p&gt;

&lt;p&gt;Seriously! &lt;a href=&quot;https://github.com/artsy/echo/pull/39&quot;&gt;It worked&lt;/a&gt;! I made a proof-of-concept and then another engineer, &lt;a href=&quot;https://github.com/pvinis&quot;&gt;Pavlos&lt;/a&gt;, finished building the new infrastructure. Changes to the app’s configuration are now done via GitHub pull requests (&lt;a href=&quot;https://github.com/artsy/echo/pull/63&quot;&gt;here is an example PR&lt;/a&gt;), which we can track over time (unlike the old web interface).&lt;/p&gt;

&lt;p&gt;I can’t stress enough how much worry I had had about Echo’s degrading status and the app’s dependency on it. But! Everything about the change to S3 went smoothly.&lt;/p&gt;

&lt;p&gt;Okay, so new versions of app are now referring to the S3 bucket instead of the old Echo API. Great! But what about the older versions of the app that are still out there? They’re still hitting the Echo API as intended, right?&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Echo’s API was still functioning, albeit on an EOL stack that we couldn’t make any changes to. Since we can’t rely on Heroku continuing to run the Echo API indefinitely, what could we do? Well, the easiest way to fix this would be to change Echo’s Artsy-controlled CNAME record to point from the old Cedar-14 Heroku app to a new server app, which could pretend to be the old API for the sake of older app versions.&lt;/p&gt;

&lt;p&gt;This leads me to one of the most scary lines of code in the entire Artsy iOS codebase. See if you can spot the problem.&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;https://echo-api-production.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For whatever reason, we never created an Artsy-controlled CNAME DNS record for Echo. We were just hitting the bare Heroku URL directly. That means that there are &lt;em&gt;seven years’&lt;/em&gt; worth of Artsy app versions out there that &lt;em&gt;need&lt;/em&gt; to be able to continue hitting &lt;em&gt;that specific&lt;/em&gt; Heroku URL.&lt;/p&gt;

&lt;p&gt;😬&lt;/p&gt;

&lt;p&gt;This is what I meant earlier about how you need to think about properly-working code differently when you develop software that runs on someone else’s hardware. If this was a server, this whole problem of old-code-hitting-outdated-APIs wouldn’t exist. But because we ship apps as binaries that get ran on someone &lt;em&gt;else’s&lt;/em&gt; hardware, we need to be aware of this kind of issue.&lt;/p&gt;

&lt;p&gt;That URL was fine when the code was written and it worked as intended for years. No one could have predicted, when it was added, that it would cause us headaches much later. Nor could we have anticipated that the Echo server’s codebase would end up in such a state.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;This is the part of the blog post where I get to be a hero (at least in my head). The Heroku app running Echo was on Cedar-14 and while we couldn’t make any changes to its code, we &lt;em&gt;could&lt;/em&gt; replace the code entirely. This would give us a new server running at the old URL. So I wrote up a small Express server to proxy HEAD and GET API requests from old iOS app versions to return the response body and headers that were expected. &lt;a href=&quot;https://github.com/artsy/echo/pull/59#&quot;&gt;The work is here&lt;/a&gt; if you’re curious. The nice thing about Heroku, at least, is that if this had gone horribly wrong we still could have reverted back to the Cedar-14 app while we figured out our next steps.&lt;/p&gt;

&lt;p&gt;We will still need to keep this Heroku app running, indefinitely, which isn’t ideal. Perhaps Artsy’s migration to Kubernetes will never be &lt;em&gt;quite&lt;/em&gt; 100% complete, but that’s a small price to pay for keeping users of our app happy.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It’s not just bugs that you need to be aware of &lt;em&gt;accidentally&lt;/em&gt; shipping in your app binaries. You have to think about how the code that’s running &lt;em&gt;as intended today&lt;/em&gt;, because it will continue to run for the foreseeable future. This means adding checks for non-200 response codes from APIs, being careful about third-party APIs, and thinking carefully about everything you ship. Apps are more than just their code; apps are everything that their code depends on, too.&lt;/p&gt;

&lt;p&gt;This is a lesson that I’ve been teaching engineers for a long time, but it’s only with our recent Echo changes that I’ve come to understand, at a deeper level, what it means to take ownership of code. Yes, the bugs, and of course, the happy little accidents, but also the mundane interconnected dependencies that make software systems so complex. And, if I’m being honest, that make software systems so much fun to work on, too.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/</guid>
        
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>teams</category>
        
      </item>
    
  </channel>
</rss>
